.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "TS" "1" "November 2015" "2.0.0" ""
.
.SH "NAME"
\fBts\fR \- test script
.
.SH "SYNOPSIS"
\fBts\fR \fIoptions\fR TEST_SCRIPT\.\.\.
.
.P
\fB[\./test_script]\fR \fIoptions\fR TESTS\.\.\.
.
.SH "DESCRIPTION"
\fBts\fR provides functions for writing tests in shell\. The test scripts can be run individually or in a batch format using \fBts\fR as a command\.
.
.P
\fBts\fR makes a test directory available on a per\-test basis so it\'s easy to sandbox tests that write or manipulate files\. \fBts\fR tries to use POSIX exclusively and so should (hopefully) work with any POSIX\-compliant shell\.
.
.SH "TEST SCRIPTS"
The \fBts\fR command expects script files that define test cases\. Test scripts have the following form:
.
.IP "" 4
.
.nf

[\./example]
#!/bin/sh
# pick a shell, any (POSIX) shell

setup () {              # optional setup
  mkdir \-p "$ts_test_dir"
}

teardown () {           # optional teardown
  rm \-r "$ts_test_dir"
}

test_true () {          # write tests named like "test_"
  true                  # return 0 to pass\.
}

\[char46] ts                    # source ts to run the tests
.
.fi
.
.IP "" 0
.
.P
To run, use any of:
.
.IP "" 4
.
.nf

ts example              # run multiple test scripts
\[char46]/example               # run a single test script
\[char46]/example test_a_thing  # run a single test
.
.fi
.
.IP "" 0
.
.P
To debug, try using \-e to execute the test function in isolation\.
.
.IP "" 4
.
.nf

\[char46]/example \-e test_a_thing    # a most useful pattern
.
.fi
.
.IP "" 0
.
.P
See the FUNCTIONS, EXAMPLES, and TROUBLESHOOT sections for more details\.
.
.SH "OPTIONS"
These options control how \fBts\fR operates\.
.
.TP
\fB\-a\fR
Show passing outputs, which are normally filtered\.
.
.TP
\fB\-c\fR
Colorize output\. (green/red/yellow \- pass/fail/not\-executable)
.
.TP
\fB\-d\fR
Debug mode\. Turns on xtrace (set \-x) for the tests and enables \-v\.
.
.TP
\fB\-e\fR
Exec mode\. Runs a test without processing the output and exits\.
.
.TP
\fB\-h\fR
Prints help\.
.
.TP
\fB\-m\fR
Monitor output\. Provide a ticker indicating the progress of tests and print a summary\. Monitor is the default\.
.
.TP
\fB\-q\fR
Quiet output\. Shows only stdout, hiding stderr\.
.
.TP
\fB\-r\fR
Remove the tmp dir on complete\. Removal is done using \fBrm \-r\fR\.
.
.TP
\fB\-s\fR
Stream output\. Show test progress as it happens\. No summary is printed\.
.
.TP
\fB\-t\fR
Set the test tmp dir (default tmp)\. The test\-specific directories are be located under this directory\.
.
.TP
\fB\-v\fR
Verbose output\. Display both stdout and stderr for the tests (enabled by default)\.
.
.SH "FUNCTIONS"
Functions provided by \fBts\fR\.
.
.TP
\fBsetup\fR:
.
.IP
A setup function run before each test\.
.
.TP
\fBteardown\fR:
.
.IP
A teardown function run after each test\.
.
.IP
\fBts\fR ensures teardown runs by setting a trap for EXIT signals during setup and the actual test\. As a result, EXIT traps in tests can prevent teardown\.
.
.TP
\fBassert_status EXPECTED ACTUAL [MESSAGE]\fR:
.
.IP
Exit 1 unless the numbers EXPECTED and ACTUAL are the same\. Use this to make assertions in the middle of a test\.
.
.TP
\fBassert_output EXPECTED ACTUAL\fR:
.
.IP
Return 1 unless the variables EXPECTED and ACTUAL are the same\. Reads from stdin for \'\-\'\. Also reads ACTUAL from stdin if ACTUAL is unspecified\.
.
.IP
Using assert_output in a pipeline is often convenient but remember this assertion only returns, it does not exit\. As a result you should either use it as the very last command in a test, or follow it with assert_status in a multipart test\. See the section on my \'tests aren\'t failing\' for more\.
.
.TP
\fBskip [MESSAGE]\fR:
.
.IP
Skip a test\. Exits 0 but counts as a skip and not a pass\.
.
.P
\fBts\fR reserves all function names starting with \'ts_\' for internal use\. Note that \fBsetup\fR and \fBteardown\fR commands on PATH will be ignored because tests will shadow them with the corresponding \fBts\fR functions\.
.
.SH "VARIABLES"
Variables provided by \fBts\fR at runtime\. Feel free to use any of them but treat them as read\-only\.
.
.TP
\fBts_test_file\fR
The name of the current test script being run\.
.
.TP
\fBts_test_case\fR
The basename of the test file, minus the extname\.
.
.TP
\fBts_test_lineno\fR
The line number where the current test is defined\.
.
.TP
\fBts_test_name\fR
The name of the current test\.
.
.TP
\fBts_test_dir\fR
The test\-specific directory\.
.
.IP
The test dir is \'tmp_dir/test_case\'\. \fBts\fR does not create this directory automatically\. Add that functionality in the setup function as needed\.
.
.P
\fBts\fR reserves all variables starting with \'ts_\' for internal use\.
.
.SH "ENVIRONMENT"
The behavior of \fBts\fR can be modified via environment variables\. Many of these may be set using options\.
.
.TP
\fBTS_USR_DIR\fR (pwd)
The user dir\. Used to determine the ts tmp dir\.
.
.TP
\fBTS_TMP_DIR\fR ($TS_USR_DIR/tmp)
The base tmp dir\.
.
.TP
\fBTS_COLOR\fR (false)
Set to "true" to enable color\.
.
.TP
\fBTS_DIFF\fR (diff)
The diff command used by assert_output\.
.
.TP
\fBTS_DEBUG\fR (false)
Set to "true" to enable debug mode\.
.
.TP
\fBTS_REMOVE_TMP_DIR\fR (false)
Set to "true" to remove tmp dir\.
.
.P
In addition these variables adjust the color output\.
.
.TP
\fBTS_PASS\fR (green)
Passing tests\.
.
.TP
\fBTS_FAIL\fR (red)
Failing tests\.
.
.TP
\fBTS_SKIP\fR (yellow)
Skipped tests\.
.
.TP
\fBTS_NORM\fR (normal)
The normal output color\.
.
.P
For example to turn failures blue:
.
.IP "" 4
.
.nf

export TS_FAIL=$(printf "%b" "\e033[0;34m")
.
.fi
.
.IP "" 0
.
.P
\fBts\fR reserves all variables starting with \'TS_\' for internal use\.
.
.SH "EXAMPLES"
Basic usage:
.
.IP "" 4
.
.nf

[\./example]
#!/bin/sh

test_arbitrary_function () {
  echo abc | grep \-q b
}

test_assert_status () {
  false
  assert_status 1 $?
}

test_assert_output_style_one () {
  out=$(printf "hello world")
  assert_output "hello world" "$out"
}

test_assert_output_style_two () {
  printf "hello world" | assert_output "hello world"
}

test_assert_output_style_three () {
printf "hello world\en" | assert_output "\e
hello world
"
}

test_skip_test () {
skip "skipping this one"
false
}

\[char46] ts
.
.fi
.
.IP "" 0
.
.P
Run like:
.
.IP "" 4
.
.nf

chmod +x example
ts example
.
.fi
.
.IP "" 0
.
.P
Shared examples:
.
.IP "" 4
.
.nf

[\./common_tests]
test_it_should_pick_lines_with_abc () {
printf "%s\en" "1 abc" "2 xyz" "3 abc" |
${picker} | assert_output "\e
1 abc
3 abc
"
}

[\./test_grep_abc]
#!/bin/sh
picker="grep abc"
\[char46] ts \. \./common_tests
\[char46] ts

[\./test_sed_abc]
#!/bin/sh
picker="sed \-ne /abc/p"
\[char46] ts \. \./common_tests
\[char46] ts
.
.fi
.
.IP "" 0
.
.P
Run like:
.
.IP "" 4
.
.nf

chmod +x test_grep_abc test_sed_abc
ts test_grep_abc test_sed_abc
.
.fi
.
.IP "" 0
.
.P
Background jobs work fine, just be sure to cleanup:
.
.IP "" 4
.
.nf

[\./background]
#!/bin/sh

teardown () {
  jobs \-p | xargs kill \-9
  true
}

test_background_job () {
  sleep 3 &
  true
}

\[char46] ts
.
.fi
.
.IP "" 0
.
.SH "TROUBLESHOOT"
\fBMy tests aren\'t running\fR
.
.P
Be sure you added \fB\. ts\fR at the end of your script\.
.
.P
\fBMy tests are failing\fR
.
.P
\fB1)\fR Are you incrementing a variable in a loop in a pipeline?
.
.P
See http://mywiki\.wooledge\.org/BashFAQ/024\.
.
.P
\fB2)\fR Is a newline missing from a variable?
.
.P
Subshells chomp the last newline off of a command\.
.
.IP "" 4
.
.nf

test_newline_is_missing_so_this_fails () {
out=$(echo abc)

assert_output "\e
abc
" "$out"
}
.
.fi
.
.IP "" 0
.
.P
One way around this is to print a sacrificial non\-newline character\.
.
.IP "" 4
.
.nf

test_newline_is_now_accounted_for () {
out=$(echo abc; printf x)

assert_output "\e
abc
" "${out%x}"
}
.
.fi
.
.IP "" 0
.
.P
Another way is to pipe into assert_output\.
.
.IP "" 4
.
.nf

test_another_newline_strategy () {
echo abc | assert_output "\e
abc
"
}
.
.fi
.
.IP "" 0
.
.P
\fBMy tests aren\'t failing\fR
.
.P
\fB1)\fR Are you using assert_output in a pipeline?
.
.P
\fBts\fR assert methods return failure (rather than exit) so this will pass\.
.
.IP "" 4
.
.nf

test_multiple_asserts_not_failing_as_intended () {
  assert_output "1" "0"
  assert_output "0" "0"
}
.
.fi
.
.IP "" 0
.
.P
The reason is that exit within a pipeline has shell\-specific behavior\. For instance if you run this with different values of shell you will get 0 for bash and dash, and 1 for zsh and ksh\.
.
.IP "" 4
.
.nf

$shell <<DOC
yes | exit 1
exit 0
DOC
echo $?
.
.fi
.
.IP "" 0
.
.P
As a result you cannot get consistent behavior if assert_output exits rather than returns; in bash/dash a failing assert_output in a pipeline would be ignored while in ksh/zsh it would be respected\. So what do you do if you want multiple assertions?
.
.P
One way is to && all the asserts at the end of the test\.
.
.IP "" 4
.
.nf

test_this_fails_as_expected () {
  printf "0" | assert_output "1" &&
  assert_output "0" "0"
}
.
.fi
.
.IP "" 0
.
.P
Another way is to use assert_status\. Unlike assert_output, assert_status exits (it does not return)\. This is ok because there is no good reason to use assert status in a pipeline \- the intent is to use it as a breakout from a multipart test\. As a result you can use a message with assert_status to track progress\.
.
.IP "" 4
.
.nf

test_this_also_fails_as_expected () {
  printf "0" | assert_output "1"
  assert_status "0" $? "checking the pipeline"
  assert_output "0" "0"
}
.
.fi
.
.IP "" 0
.
.P
\fBTeardown isn\'t running\fR
.
.P
Are you setting an EXIT trap? \fBts\fR uses an EXIT trap to ensure that teardown runs even when setup or a test exits\. Resetting an EXIT trap can prevent teardown from running\.
.
.IP "" 4
.
.nf

test_teardown_will_not_run () {
  trap \- EXIT
  exit 1
}
.
.fi
.
.IP "" 0
.
.P
\fBI\'m using DASH (maybe you\'re on ubuntu)\fR
.
.P
DASH is quirky\. Last I checked you cannot concatenate options like you can in other shells, so when launching scripts individually (the only time this applies) you must separate options out\.
.
.IP "" 4
.
.nf

\[char46]/test_script \-s \-c  # this
\[char46]/test_script \-sc    # not this!
.
.fi
.
.IP "" 0
.
.P
Shared examples do not work with DASH \- the \fB\. ts \. files\.\.\.\fR syntax relies on the dot operator to set arguments which dot in DASH does not do\. There isn\'t actually anything in the POSIX spec that says it should, but it\'s a break in the conventions used by other shells\.
.
.SH "INSTALLATION"
Add \fBts\fR to your PATH (or execute it directly)\. A nice way of doing so is to clone the repo and add the bin dir to PATH\. This allows easy updates via \fBgit pull\fR and should make the manpages available via \fBman ts\fR\.
.
.IP "" 4
.
.nf

git clone git://github\.com/thinkerbot/ts\.git
export PATH="$PATH:$(pwd)/ts/bin"
.
.fi
.
.IP "" 0
.
.P
If you\'re using homebrew \fIhttp://brew\.sh/\fR on OSX you can tap goodlittlescript \fIhttps://github\.com/goodlittlescript/homebrew\-gls\fR\.
.
.IP "" 4
.
.nf

brew tap goodlittlescript/homebrew\-gls
brew install ts
.
.fi
.
.IP "" 0
.
.SH "DEVELOPMENT"
Clone the repo as above\. To run the tests (written in \fBts\fR):
.
.IP "" 4
.
.nf

ts test/suite
.
.fi
.
.IP "" 0
.
.P
To run the tests on various distros:
.
.IP "" 4
.
.nf

vagrant up
\[char46]/test/vm
.
.fi
.
.IP "" 0
.
.P
To generate the manpages:
.
.IP "" 4
.
.nf

make manpages
.
.fi
.
.IP "" 0
.
.P
Report bugs here: http://github\.com/thinkerbot/ts/issues\.
.
.SH "CONTRIBUTORS"
Thanks for the help!
.
.IP "\(bu" 4
Angelo Lakra (github\.com/alakra)
.
.IP "\(bu" 4
Thomas Adam (github\.com/ThomasAdam)
.
.IP "" 0
.
.SH "COPYRIGHT"
TS is Copyright (C) 2011 Simon Chiang \fIhttp://github\.com/thinkerbot\fR
