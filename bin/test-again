#!/usr/bin/env sh

_t_CMD="${0##*/}"

# Prints usage message.
_t_usage () {
  if [ "$_t_CMD" = test-again ]; then
    local args="[<script> ...]"
    local examples="\
  test-again test_script ... # run test functions of one or more test scripts
  test_script                # run test functions of a single test script
  test_script test_case      # run selected test functions from test script
"
  else
    local args="[<function> ...]"
    local examples="\
  $_t_CMD                    # run all test functions
  $_t_CMD <test_a>           # run a single test function
  $_t_CMD <test_b> <test_c>  # run selected test functions
"
  fi
  echo "\
usage: $_t_CMD [-h|-l|-kvd] [-t <tmp-dir>] $args

$examples
options:

  -h  print this help
  -l  list tests (don't run, just print)
  -k  keep (do not delete) the test dirs
  -v  verbose output (print stdout)
  -d  debug output (print shell traces)
  -t  set the tmp dir path (default ./tmp)
"
}

# Prints help message.
_t_help () {
  echo "Run shell functions as tests."
  _t_usage
}

while getopts "dhklt:v" option; do
  case "$option" in
    d) _t_OPT_DEBUG=1; _t_OPT_VERB=1 ;;
    h) _t_help
       exit 0 ;;
    k) _t_OPT_KEEP_TMP=1 ;;
    l) _t_OPT_LIST=1 ;;
    t) _t_OPT_TMP_DIR=$OPTARG ;;
    v) _t_OPT_VERB=1 ;;
    *) _t_usage | head -n 1
       exit 2 ;;
  esac
done
shift $((OPTIND - 1))

_t_TOP_DIR="$PWD"

# export command options to test scripts and subtest runs
export _t_TMP_DIR="${_t_OPT_TMP_DIR:-$_t_TOP_DIR/tmp}"
export _t_OPT_DEBUG="${_t_OPT_DEBUG:-}"
export _t_OPT_KEEP_TMP="${_t_OPT_KEEP_TMP:-}"
export _t_OPT_LIST="${_t_OPT_LIST:-}"
export _t_OPT_VERB="${_t_OPT_VERB:-}"
export _t_SUB_INDENT="${_t_SUB_INDENT:-}"

#
# private functions
#

# Prints all functions in a file starting with 'test_' or $test_pattern.
_t_list () {
  local file="$1"
  shift
  local test_pattern; test_pattern=$(printf "%s" "$*" | tr " " "|")
  grep -onE "^[[:space:]]*(${test_pattern:-test_\w+})[[:space:]]*\(\)" /dev/null "$file" |
  sed -e 's/^\([^:]*\):\([0-9]\{1,\}\):[[:space:]]*\([^ (]\{1,\}\).*/\3 \1:\2/'
}

# Helper function to print output as diag lines.
_t_diag_line () {
  sed "s/^/$_t_SUB_INDENT# /" >&2
}

# Runs a specific test.
_t_run_test () {
  if [ "$_t_OPT_VERB" ]; then
    exec 1>&2
  else
    exec 1>/dev/null
  fi
  # input /dev/null so that tests which read from stdin will not hang
  exec </dev/null

  trap 't_teardown' EXIT
  if [ "$_t_OPT_DEBUG" ]; then
    set -eux
  else
    set -eu
  fi

  t_setup
  local exit_status=$?

  if [ $exit_status -eq 0 ]; then
    "$t_TEST_NAME"
    exit_status=$?
  fi
  trap - EXIT

  t_teardown
  return $exit_status
}

# Runs test step once.
_t_run_step_once () {
  if [ "$_t_OPT_VERB" ]; then
    exec 1>&2
  else
    exec 1>/dev/null
  fi
  # input /dev/null so that tests which read from stdin will not hang
  exec </dev/null

  if [ "$_t_OPT_DEBUG" ]; then
    set -eux
  else
    set -eu
  fi

  "t_${1}_once"
}

# Runs a test script or selected tests from it, when given as option.
_t_run_test_steps () {
  local test_dir=$(cd "$(dirname $0)" && pwd)
  local test_file="$0"
  local test_case="${test_file##*/}"
  test_case="${test_case%\.*}"

  local case_dir="$_t_TMP_DIR/${test_case}_$$"
  if ! [ "$_t_OPT_LIST" ] && ! rm -rf "$case_dir"; then
    echo "error: could not clean existing test dir: $case_dir"
    exit 1
  fi

  # use fd 3>1 for tap output
  # fd 2 is stderr and stdout
  exec 3>&1

  local test_cnt=1
  local test_plan; test_plan=$(_t_list "$test_file" "$@" | wc -l | xargs)
  if ! [ "$_t_OPT_LIST" ]; then
    >&3 echo "$_t_SUB_INDENT$test_cnt..$test_plan"
  fi

  mkdir -p "$case_dir"
  if ! [ "$_t_OPT_LIST" ]; then
    (
      (_t_run_step_once setup)
      # shellcheck disable=SC2181
      [ $? -eq 0 ] || touch "$case_dir"/.fatal
    ) 2>&1 | _t_diag_line

    if [ -e "$case_dir"/.fatal ]; then
      >&2 echo "${_t_SUB_INDENT}error! setup once failed"
      (_t_run_step_once teardown) 2>&1 | _t_diag_line
      if ! [ "$_t_OPT_KEEP_TMP" ]; then
        rm -rf "$case_dir"
      fi
      return 1
    fi
  fi

  _t_list "$test_file" "$@" |
  while read -r test_name test_desc; do
    if [ "$_t_OPT_LIST" ]; then
      >&3 echo "[$test_desc] $test_name"
      continue
    fi
    export t_TEST_FILE=$test_file
    export t_TEST_NAME=$test_name
    export t_TEST_NUM=$test_cnt
    export t_BASE_DIR="$_t_TOP_DIR"
    export t_TEST_DIR="$test_dir"
    export t_BASE_TMP="$case_dir"
    # shellcheck disable=SC2030
    export t_TEST_TMP="$case_dir/$test_name"
    export t_CALL_RET=""
    export t_CALL_OUT=""

    mkdir -p "$t_TEST_TMP"
    (
      if [ "$_t_OPT_VERB" ]; then
        echo "$test_name [$test_desc]"
      fi
      # run the test by calling back into the test script
      # use a subprocess to prevent leakage (eg set -x)
      # a zero exit status is considered a pass, otherwise fail
      (_t_run_test)
      # shellcheck disable=SC2181
      [ $? -eq 0 ] || touch "$t_TEST_TMP"/.fail
    ) 2>&1 | _t_diag_line

    if [ -e "$t_TEST_TMP"/.subtest ]; then
      local subtest; subtest=$(cat "$t_TEST_TMP"/.subtest)
      (
        # shellcheck disable=SC2030
        _t_SUB_INDENT="    $_t_SUB_INDENT"
        $subtest
        # shellcheck disable=SC2181
        [ $? -eq 0 ] || touch "$t_TEST_TMP"/.fail
      )
    fi

    if [ -e "$t_TEST_TMP"/.bail ]; then
      local reason; reason="$(cat "$t_TEST_TMP"/.bail)"
      [ "$reason" ] && reason=" $reason"
      >&3 echo "bail out!$reason"
      exit 1
    elif [ -e "$t_TEST_TMP"/.skip ]; then
      local reason; reason="$(cat "$t_TEST_TMP"/.skip)"
      [ "$reason" ] && reason=" $reason"
      status="ok $test_cnt $test_name # skip$reason"
    elif [ -e "$t_TEST_TMP"/.fail ]; then
      status="not ok $test_cnt $test_name"
      touch "$case_dir"/.fail
    else
      status="ok $test_cnt $test_name"
    fi

    # shellcheck disable=SC2031
    >&3 echo "$_t_SUB_INDENT$status"
    test_cnt=$((test_cnt + 1))
  done

  (
    (_t_run_step_once teardown)
    # shellcheck disable=SC2181
    [ $? -eq 0 ] || touch "$case_dir"/.fatal
  ) 2>&1 | _t_diag_line

  local result=0
  if [ -e "$case_dir"/.fatal ]; then
    # shellcheck disable=SC2031
    >&2 echo "${_t_SUB_INDENT}error! teardown once failed"
    result=1
  elif [ -e "$case_dir"/.fail ]; then
    result=1
  fi
  if ! [ "$_t_OPT_KEEP_TMP" ]; then
    rm -rf "$case_dir"
  fi
  return $result
}

# Runs multipe test scripts given as 'test-again' arguments.
_t_run_test_scripts () {
  local error
  for test_file in "$@"; do
    if [ -f "$test_file" ]; then
      if [ -x "$test_file" ]; then
        if [ "${test_file}" = "${test_file#*/}" ]; then
          ./"$test_file"
        else
          "$test_file"
        fi
      else
        echo "error! $test_file not executable"
        error=1
        continue
      fi
    else
      echo "error! $test_file not a file"
      error=1
      continue
    fi
  done
  if [ "$error" ]; then
    exit 1
  fi
}

# Helper function for printing messages on stderr.
_t_msg () {
  >&2 echo "$1"
}

# Helper function for expect indention for multi lines.
_t_ind () {
  {
    echo "$1" | sed "s/^/  /"
  } >&2
}

#
# public functions
#

# Optional setup step before each test run.
if ! type "t_setup" >/dev/null 2>&1; then
t_setup () { return; }
fi

# Optional teardown after each test run.
if ! type "t_teardown" >/dev/null 2>&1; then
t_teardown () { return; }
fi

# Optional setup step before all tests run.
if ! type "t_setup_once" >/dev/null 2>&1; then
t_setup_once () { return; }
fi

# Optional teardown step after all tests run.
if ! type "t_teardown_once" >/dev/null 2>&1; then
t_teardown_once () { return; }
fi

# Skip this test with optional reason.
t_skip () {
  local reason="${1:-}"
  # shellcheck disable=SC2031
  printf "%s\n" "$reason" > "$t_TEST_TMP"/.skip
  exit 0
}

# Abort the test run with optional reason.
t_bailout () {
  local reason="${1:-}"
  # shellcheck disable=SC2031
  printf "%s\n" "$reason" > "$t_TEST_TMP"/.bail
  exit 1
}

# Run a test script as subtest.
t_subtest () {
  # shellcheck disable=SC2031
  printf "%s\n" "$1" > "$t_TEST_TMP"/.subtest
  exit
}

# Call a program/function and save output and status.
t_call () {
  set +x
  if [ "$1" = -perr ]; then
    local perr=1
    shift
  fi
  set +e
  if [ "${perr:-}" ]; then
    [ "$_t_OPT_DEBUG" ] && set -x
    t_CALL_OUT="$(set -e; "$@" 2>&1)"
    t_CALL_RET=$?
  else
    [ "$_t_OPT_DEBUG" ] && set -x
    t_CALL_OUT="$(set -e; "$@")"
    t_CALL_RET=$?
  fi
  set -e
}

# Debug function to stop test execution.
t_pause () {
  read -r _ < /dev/tty
}

# Assert, if return (exit) code of command is not equal to the expected output.
t_expect_ret () {
  set +e
  (set -e; $1)
  local actual=$?
  local expect="${2:-0}"
  set -e
  if [ $actual = "$expect" ]; then
    return
  fi
  set +x
  _t_msg "expect_ret failed"
  _t_ind "$1"
  _t_msg " actual   $actual"
  _t_msg " expected $expect"
  [ "$_t_OPT_DEBUG" ] && set -x
  exit 1
}

# Assert, if std output of command is not equal to the expected output.
t_expect_out () {
  local actual; actual="$(eval "$1")" || true
  local expect="${2:-}"
  if [ "$actual" = "$expect" ]; then
    return
  fi
  set +x
  _t_msg "expect_out failed"
  _t_ind "$1"
  _t_msg " actual"
  _t_ind "$actual"
  _t_msg " expected"
  _t_ind "$expect"
  [ "$_t_OPT_DEBUG" ] && set -x
  exit 1
}

# Assert, if value of expression is not equal to the expected value.
t_expect_eq () {
  eval "local actual=\"$1\""
  local expect="${2:-}"
  if [ "$actual" = "$expect" ]; then
    return
  fi
  set +x
  _t_msg "expect_eq failed"
  _t_ind "$1"
  if ! [ "$1" = "$actual" ]; then
    _t_msg " actual"
    _t_ind "$actual"
  fi
  _t_msg " expected"
  _t_ind "$expect"
  [ "$_t_OPT_DEBUG" ] && set -x
  exit 1
}

# BDD style test comments.
t_given () {
  _t_msg "GIVEN $1"
}

t_when () {
  _t_msg "WHEN  $1"
}

t_and () {
  _t_msg "AND   $1"
}

t_then () {
  _t_msg "THEN  $1"
}

#
# Run the given test scripts or this script as single suite.
#

if [ "$_t_CMD" = test-again ]; then
  _t_run_test_scripts "$@"
else
  _t_run_test_steps "$@"
fi
