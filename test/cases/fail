#!/bin/sh

test_exit_fail () {
  exit 1
}
#-> not ok test_exit_fail

test_return_fail () {
  false
}
#-> not ok test_return_fail

test_expect_status_true_fail () {
  expect_status true 1
}
#-> # expect_status failed: true
#-> #  actual   0
#-> #  expected 1
#-> not ok test_expect_status_true_fail

test_expect_status_false_fail () {
  expect_status false 0
}
#-> # expect_status failed: false
#-> #  actual   1
#-> #  expected 0
#-> not ok test_expect_status_false_fail

test_expect_output_fail () {
  expect_output 'echo "hello world"' "hell0 world"
}
#-> # expect_output failed: echo "hello world"
#-> #  actual
#-> #   hello world
#-> #  expected
#-> #   hell0 world
#-> not ok test_expect_output_fail

test_expect_output_multiline_fail () {
  expect_output 'for i in hello world; do echo $i; done' "\
hell0
world"
}
#-> # expect_output failed: for i in hello world; do echo $i; done
#-> #  actual
#-> #   hello
#-> #   world
#-> #  expected
#-> #   hell0
#-> #   world
#-> not ok test_expect_output_multiline_fail

test_expect_value_fail () {
  expect_value 1 2
}
#-> # expect_value failed: 1
#-> #  actual
#-> #   1
#-> #  expected
#-> #   2
#-> not ok test_expect_value_fail

test_expect_value_char_fail () {
  local a="x"
  expect_value '$a' X
}
#-> # expect_value failed: $a
#-> #  actual
#-> #   x
#-> #  expected
#-> #   X
#-> not ok test_expect_value_char_fail

test_expect_value_number_fail () {
  local a=0
  expect_value '$a' 1
}
#-> # expect_value failed: $a
#-> #  actual
#-> #   0
#-> #  expected
#-> #   1
#-> not ok test_expect_value_number_fail

test_multiple_expects_fail_early () {
  expect_status true 1
  expect_status true 0
}
#-> # expect_status failed: true
#-> #  actual   0
#-> #  expected 1
#-> not ok test_multiple_expects_fail_early

test_multiple_expects_fail_late () {
  expect_status true 0
  expect_status true 1
}
#-> # expect_status failed: true
#-> #  actual   0
#-> #  expected 1
#-> not ok test_multiple_expects_fail_late

. test/helper
. ts
