#!/usr/bin/env sh
CMDPATH=$(cd "$(dirname $0)" && pwd)
BASEDIR=$CMDPATH/..

PATH=$PATH:$BASEDIR/bin
CASES=$CMDPATH/cases

#
# test-again script tests
#

test_ta_runs_script () {
  t_expect_out "$CASES/ok" "\
1..1
ok 1 test_pass"
}

test_ta_runs_script_in_pwd () {
  cd "$CASES"
  t_expect_out "./ok" "\
1..1
ok 1 test_pass"
}

test_ta_runs_multiple_scripts () {
  t_expect_out "test-again $CASES/ok $CASES/not_ok" "\
1..1
ok 1 test_pass
1..1
not ok 1 test_fail"
}

test_ta_runs_tests_with_same_name_in_different_scripts () {
  t_expect_out "test-again $CASES/xyz_one $CASES/xyz_two" "\
1..1
ok 1 test_xyz
1..1
not ok 1 test_xyz"
}

test_ta_reports_non_executable_scripts () {
  t_expect_out "test-again $CASES/nox" \
    "error! $CASES/nox not executable"
}

test_ta_reports_non_files () {
 t_expect_out "test-again miss tests/miss" "\
error! miss not a file
error! tests/miss not a file"
}

test_script_runs_tests () {
  t_expect_out "$CASES/abc" "\
1..4
ok 1 test_a
ok 2 test_b
not ok 3 test_c
ok 4 test_s # skip s" 2>/dev/null
}

test_script_runs_named_tests () {
  t_expect_out "$CASES/abc test_a test_c" "\
1..2
ok 1 test_a
not ok 2 test_c" 2>/dev/null
}

test_script_runs_tests_matching_patterns () {
  t_expect_out '$CASES/abc test_[ac]' "\
1..2
ok 1 test_a
not ok 2 test_c" 2>/dev/null
}

test_functions () {
  t_subtest $CASES/functions
}

test_changed_working_dirs () {
  t_subtest $CASES/change_dirs
}

#
# test-again options tests
#

test_ta_opt_h_prints_help () {
  t_expect_ret "test-again -h | grep -q 'usage:'" 0
}

test_script_opt_h_prints_help () {
  t_expect_ret "$CASES/ok -h | grep -q 'usage:'" 0
}

test_ta_opt_l_lists_tests () {
  t_expect_out "test-again -l $CASES/abc" "\
[$CASES/abc:3] test_a
[$CASES/abc:9] test_b
[$CASES/abc:15] test_c
[$CASES/abc:21] test_s"
}

test_script_opt_l_lists_tests () {
  t_expect_out "$CASES/abc -l" "\
[$CASES/abc:3] test_a
[$CASES/abc:9] test_b
[$CASES/abc:15] test_c
[$CASES/abc:21] test_s"
}

test_script_opt_default_prints_test_stderr () {
  t_expect_out "$CASES/abc test_a 2>&1" "\
1..1
# A
ok 1 test_a"
}

test_script_opt_v_prints_test_description_and_stdout () {
  t_expect_out "$CASES/abc -v test_a 2>&1" "\
1..1
# test_a [$CASES/abc:3]
# a
# A
ok 1 test_a"
}

test_script_opt_v_prints_result_on_stdout () {
  t_expect_out "$CASES/abc -v test_a 2>/dev/null" "\
1..1
ok 1 test_a"
}

test_script_opt_v_prints_comments_on_stderr () {
  t_expect_out "$CASES/abc -v test_a 2>&1 1>/dev/null" "\
# test_a [$CASES/abc:3]
# a
# A"
}

test_script_opt_d_prints_trace_logs () {
  local loglines=$($CASES/ok -d 2>&1 | wc -l | xargs)
  t_expect_ret "test $loglines -eq 18" 0
}

test_script_opt_dv_is_the_same_as_d () {
  local loglines=$($CASES/ok -dv 2>&1 | wc -l | xargs)
  t_expect_ret "test $loglines -eq 18" 0
}

test_script_opt_default_deletes_tmpdir () {
  rm -rf $_t_TMP_DIR/ok_*
  $CASES/ok
  t_expect_ret "test $(ls $_t_TMP_DIR/ok_* 2>/dev/null)" 1
}

test_script_opt_k_keeps_tmpdir () {
  rm -rf $_t_TMP_DIR/ok_*
  $CASES/ok -k
  t_expect_ret "test $(ls $_t_TMP_DIR/ok_*)" 0
  rm -rf $_t_TMP_DIR/ok_*
}

test_script_opt_t_sets_tmpdir () {
  $CASES/ok -k -t "temp"
  t_expect_ret "test $(ls $PWD/temp/ok_*)" 0
  rm -rf "$PWD/temp"
}

#
# test-again properties tests
#

test_properties_are_available () {
  t_expect_eq '$t_TEST_FILE' "$0"
  t_expect_eq '$t_TEST_NAME' "test_properties_are_available"
  t_expect_eq '$t_TEST_NUM' 25
  t_expect_eq '$t_BASE_DIR' "$PWD"
  t_expect_eq '$t_BASE_TMP' "$PWD/tmp/suite_$$"
  t_expect_eq '$t_TEST_TMP' "$PWD/tmp/suite_$$/test_properties_are_available"
}

#
# test-again exit status tests
#

test_ta_returns_1_for_non_executable_scripts () {
  t_expect_ret "test-again $CASES/nox" 1
}

test_ta_returns_1_for_non_files () {
  t_expect_ret "test-again miss tests/miss" 1
}

test_ta_returns_0_for_passing_test () {
  t_expect_ret "test-again $CASES/ok" 0
}

test_ta_returns_1_for_failing_test () {
  t_expect_ret "test-again $CASES/ok" 0
}

test_script_returns_0_for_passing_test () {
  t_expect_ret "$CASES/ok" 0
}

test_script_returns_1_for_failing_test () {
  t_expect_ret "$CASES/not_ok" 1
}

#
# test-again workflow tests
#

test_pass () {
  t_subtest $CASES/pass
}

test_pass_in_steps () {
  t_call -perr "$CASES/pass_in_steps"
  t_expect_eq '$t_CALL_RET' 0
  t_expect_eq '$t_CALL_OUT' "\
1..2
# in setup once
# in setup
# in test a
# in teardown
ok 1 test_pass_a
# in setup
# in test b
# in teardown
ok 2 test_pass_b
# in teardown once"
}

test_fail () {
  t_subtest "$CMDPATH/test_fail"
}

test_fail_in_steps () {
  t_subtest "$CMDPATH/test_fail_in_steps"
}

test_skip () {
  t_subtest "$CMDPATH/test_skip"
}

test_bailout () {
  t_subtest "$CMDPATH/test_bailout"
}

test_call () {
  t_subtest "$CMDPATH/test_call"
}

test_subtests () {
  t_subtest "$CMDPATH/test_subtests"
}

test_bdd_messages () {
  t_call -perr env $CASES/bdd
  t_expect_eq '$t_CALL_RET' 0
  t_expect_eq '$t_CALL_OUT' "\
1..1
# GIVEN a strig
# AND   a number
# WHEN  calling printf
# THEN  the result is the concatinated string
ok 1 test_bdd"
}

#
# test-again misc tests
#

test_ta_prevents_hang_by_stdin () {
  # cat hangs if stdin is waiting
  local from_stdin=$(cat)
  t_expect_eq '$from_stdin' ""
}

test_ta_allows_exit_trap () {
  trap "exit 0" EXIT
  exit 1
}

. test-again
